<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <OutputType>Exe</OutputType>
    <TargetFramework>net8.0</TargetFramework>
    <ImplicitUsings>enable</ImplicitUsings>
    <Nullable>enable</Nullable>
  </PropertyGroup>

</Project>
﻿
Microsoft Visual Studio Solution File, Format Version 12.00
# Visual Studio Version 17
VisualStudioVersion = 17.5.002.0
MinimumVisualStudioVersion = 10.0.40219.1
Project("{9A19103F-16F7-4668-BE54-9A1E7A4F7556}") = "app", "app.csproj", "{B8008D6B-453A-4668-9726-7354CC943F06}"
EndProject
Global
	GlobalSection(SolutionConfigurationPlatforms) = preSolution
		Debug|Any CPU = Debug|Any CPU
		Release|Any CPU = Release|Any CPU
	EndGlobalSection
	GlobalSection(ProjectConfigurationPlatforms) = postSolution
		{B8008D6B-453A-4668-9726-7354CC943F06}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{B8008D6B-453A-4668-9726-7354CC943F06}.Debug|Any CPU.Build.0 = Debug|Any CPU
		{B8008D6B-453A-4668-9726-7354CC943F06}.Release|Any CPU.ActiveCfg = Release|Any CPU
		{B8008D6B-453A-4668-9726-7354CC943F06}.Release|Any CPU.Build.0 = Release|Any CPU
	EndGlobalSection
	GlobalSection(SolutionProperties) = preSolution
		HideSolutionNode = FALSE
	EndGlobalSection
	GlobalSection(ExtensibilityGlobals) = postSolution
		SolutionGuid = {FB99F151-044B-41A1-9D75-B00724E0AD4D}
	EndGlobalSection
EndGlobal
﻿// See https://aka.ms/new-console-template for more information
//Console.WriteLine("Hello, World!");

using System;
using System.Xml.XPath;

namespace app
{

    delegate void Printer();

    class program
    {
        static String location;
        static DateTime time = DateTime.Now;
        public static string result;

        static int[] intArray = {1,2,3,4,5,6};
        static void Main(string []args)
        {
           //value and references
           Console.WriteLine(location==null?"location is null":location);
           Console.WriteLine(time==null?"time is null":time);

            //one line to sumup
           long i = TotalAllEvenNumbers_2(intArray);
           Console.WriteLine(i);

            //this is false
           if(time==null)
           {
             Console.WriteLine("time is null");
           }

           // Create a new object of the Circle class.
		Circle Object = new Circle();
        programCircle p = new programCircle();
		// Calculate the circumference based on the radius of the object and the op function.
		Console.WriteLine("Circumference of the Circle is: " + Object.Calculate(Object.op));

        //checking Func
        Func<string> f = programCircle.GetMessage;
        Console.WriteLine("Func GetMessage: " + programCircle.GetMessage());

            //await task and thread.Sleep
            TaskDelay.SaySomething();
            Thread.Sleep(6);
            Console.WriteLine(result);

            //void delegate
            List<Printer> printers = new List<Printer>();
            int j = 0;
            for(;j<10;j++)
            {
                //printers.Add(delegate{Console.WriteLine(j);});
                                printers.Add(delegate{Console.WriteLine(new string("test"));});

            }

            foreach(var printer in printers)
            {
                printer();
            }
        }

        static long TotalAllEvenNumbers(int[] intArray) {
        return intArray.Where(i => i % 2 == 0).Sum(i => (long)i);
        }

        static long TotalAllEvenNumbers_2(int[] intArray) {
        return (from i in intArray where i % 2 == 0 select (long)i).Sum();
        }
    }
}



// See https://aka.ms/new-console-template for more information
//Console.WriteLine("Hello, World!");

using System;

namespace app
{

    class programCircle
    {

        


        public static string GetMessage() { return "Hello world"; }

    }



public sealed class Circle {
	 	private double radius = 2;

 		public double Calculate(Func<double, double> op) {
 			return op(radius);
 		}

        public  double op (double radius)
        {
        	return 2 * radius * Math.PI;
        }
	}
    
}



using System;
using System.Xml.XPath;

namespace app
{
    class TaskDelay{
        public static async Task<string> SaySomething()
        {
            await Task.Delay(5);
            program.result = "Hello World test";
            return "Something";
        }
    }
}